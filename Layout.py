# -*- coding: utf-8 -*-
# Author: Chen Pei Yu @2023
# Form implementation generated from reading ui file '/Users/gump/Documents/_Python/app_copy/a.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import time,sys,os
from gump_EDLCopy_CORE import CopyByEDL

class Ui_MainWindow(object):
    
    thePath = {}
    thePath['clip_path'] = '' #要拷貝的檔案edl/txt  /Users/gump/Desktop/EDLCopyV061/demo_type2.edl
    thePath['from_path'] = '' #搜尋檔案的來源路徑 /Users/gump/Desktop/EDLCopyV061/CP_FROM
    thePath['to_path'] = '' #拷貝的目標路徑 /Users/gump/Desktop/EDLCopyV061/TO
    thePath['rad_chksum'] = 'Y' #要不要校驗
    thePath['rad_kpdir'] = 'Y' #要不要保留路徑數
    thePath['spin_level'] = 0 #要去掉前面幾個路徑
    thePath['chkbox_only'] = 'N' #只要拷貝某幾種檔案
    thePath['input_only'] = '' #只要拷貝哪些種檔案
    thePath['chkbox_only_not'] = 'N' #不要拷貝某幾種檔案
    thePath['input_only_not'] = '' #不要拷貝哪幾種檔案
    
    LAST_DIR = '.' #上次打開的路徑記錄在setting.ini
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Radio Checksum Y
        self.rad_checksum = QtWidgets.QButtonGroup(self.centralwidget)######
        self.rad_checksum_y = QtWidgets.QRadioButton(self.centralwidget)
        self.rad_checksum_y.setGeometry(QtCore.QRect(75, 126, 100, 20))
        self.rad_checksum_y.setObjectName("rad_checksum_y")
        self.rad_checksum.addButton(self.rad_checksum_y)######
        self.rad_checksum_y.function = "chk_y" ######
        self.rad_checksum_y.setChecked(True) ######
        self.rad_checksum_y.toggled.connect(self.onClicked_chksum)  ###### 
        
        # Radio Checksum N
        self.rad_checksum_n = QtWidgets.QRadioButton(self.centralwidget)
        self.rad_checksum_n.setGeometry(QtCore.QRect(289, 125, 100, 20))
        self.rad_checksum_n.setObjectName("rad_checksum_n")
        self.rad_checksum_n.function = "chk_n" ######
        self.rad_checksum_n.toggled.connect(self.onClicked_chksum)  ######
        self.rad_checksum.addButton(self.rad_checksum_n)######
        
        # Radio Keep Directory Y
        self.rad_kpDir = QtWidgets.QButtonGroup(self.centralwidget)######
        self.rad_kpDir_y = QtWidgets.QRadioButton(self.centralwidget)
        self.rad_kpDir_y.setGeometry(QtCore.QRect(75, 156, 100, 20))
        self.rad_kpDir_y.setObjectName("rad_kpDir_y")
        self.rad_kpDir_y.setChecked(True) ######
        self.rad_kpDir_y.function = "kpdir_y" ######
        self.rad_kpDir_y.toggled.connect(self.onClicked_kpdir)  ######
        self.rad_kpDir.addButton(self.rad_kpDir_y)######
        
        # Radio Keep Directory N
        self.rad_kpDir_n = QtWidgets.QRadioButton(self.centralwidget)
        self.rad_kpDir_n.setGeometry(QtCore.QRect(289, 155, 100, 20))
        self.rad_kpDir_n.setObjectName("rad_kpDir_n")
        self.rad_kpDir_n.function = "kpdir_n" ######
        self.rad_kpDir_n.toggled.connect(self.onClicked_kpdir)  ######
        self.rad_kpDir.addButton(self.rad_kpDir_n)######
        
        # Btn Choose EDL
        self.path_edl = QtWidgets.QPushButton(self.centralwidget)
        self.path_edl.setGeometry(QtCore.QRect(80, 30, 113, 32))
        self.path_edl.setObjectName("path_edl")
        self.path_edl.clicked.connect(self.CallFileChoose_edl) ###Choose EDL
        
        # Label Title
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(30, 10, 71, 16))
        self.label_title.setObjectName("label_title")
        
        # Btn Choose Copy To
        self.path_dest = QtWidgets.QPushButton(self.centralwidget)
        self.path_dest.setGeometry(QtCore.QRect(80, 90, 113, 32))
        self.path_dest.setObjectName("path_dest")
        self.path_dest.clicked.connect(self.CallFileChoose_to) ###Choose To Path 
        
        # Btn Choose Copy From
        self.path_from = QtWidgets.QPushButton(self.centralwidget)
        self.path_from.setGeometry(QtCore.QRect(80, 60, 113, 32))
        self.path_from.setObjectName("path_from")
        self.path_from.clicked.connect(self.CallFileChoose_from) ###Choose From Path
        
        # self.spin_level = QtWidgets.QSpinBox(self.centralwidget)
        # self.spin_level.setGeometry(QtCore.QRect(152, 176, 48, 24))
        # self.spin_level.setObjectName("spin_level")
        
        # Label 
        self.label_dontkeep = QtWidgets.QLabel(self.centralwidget)
        self.label_dontkeep.setGeometry(QtCore.QRect(95, 180, 60, 16))
        self.label_dontkeep.setObjectName("label_dontkeep")
        
        # self.label_level = QtWidgets.QLabel(self.centralwidget)
        # self.label_level.setGeometry(QtCore.QRect(209, 180, 60, 16))
        # self.label_level.setObjectName("label_level")
        
        # Label
        self.label_overide = QtWidgets.QLabel(self.centralwidget)
        self.label_overide.setGeometry(QtCore.QRect(309, 163, 291, 51))
        self.label_overide.setObjectName("label_overide")
        
        # Progress Bar
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(97, 360, 481, 23))        
        self.progressBar.setObjectName("progressBar")               
        self.progressBar.setMinimum(0)  # 设置进度条最小值
        self.progressBar.setVisible(False)               
        
        # Label
        self.label_copy_0 = QtWidgets.QLabel(self.centralwidget)
        self.label_copy_0.setGeometry(QtCore.QRect(87, 380, 60, 16))
        self.label_copy_0.setObjectName("label_copy_0")
        
        # Label: Total Count
        self.label_copy_tol = QtWidgets.QLabel(self.centralwidget)
        self.label_copy_tol.setGeometry(QtCore.QRect(560, 380, 41, 16))
        self.label_copy_tol.setObjectName("label_copy_tol")
        
        # Label: Now Copy Count 
        self.label_copy_now_desc = QtWidgets.QLabel(self.centralwidget)
        self.label_copy_now_desc.setGeometry(QtCore.QRect(97, 380, 60, 16))
        self.label_copy_now_desc.setObjectName("label_copy_now_desc")
        
        # Label: Now Copy
        self.label_copy_now = QtWidgets.QLabel(self.centralwidget)
        self.label_copy_now.setGeometry(QtCore.QRect(250, 380, 170, 16))
        self.label_copy_now.setObjectName("label_copy_now")
        
        # Text Log
        self.text_log = QtWidgets.QTextEdit(self.centralwidget)
        self.text_log.setGeometry(QtCore.QRect(90, 410, 491, 171))
        self.text_log.setObjectName("text_log")
        
        # Label: Hu Hu
        self.label_huhu = QtWidgets.QLabel(self.centralwidget)
        self.label_huhu.setGeometry(QtCore.QRect(90, 630, 491, 16))
        self.label_huhu.setObjectName("label_huhu")
        
        # Label
        self.label_path_edl = QtWidgets.QLabel(self.centralwidget)
        self.label_path_edl.setGeometry(QtCore.QRect(210, 36, 361, 16))
        # self.label_path_edl.setText("")
        self.label_path_edl.setObjectName("label_path_edl")
        
        # Label
        self.label_path_from = QtWidgets.QLabel(self.centralwidget)
        self.label_path_from.setGeometry(QtCore.QRect(210, 67, 361, 16))
        # self.label_path_from.setText("")
        self.label_path_from.setObjectName("label_path_from")
        
        # Label
        self.label_path_dest = QtWidgets.QLabel(self.centralwidget)
        self.label_path_dest.setGeometry(QtCore.QRect(210, 96, 361, 16))
        # self.label_path_dest.setText("")
        self.label_path_dest.setObjectName("label_path_dest")
        
        # Btn Start Process
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(90, 320, 491, 32))
        self.btn_start.setObjectName("btn_start")
        self.btn_start.clicked.connect(self.CallCopyClass)
        
        # Input Copy Only
        self.line_only_copy = QtWidgets.QLineEdit(self.centralwidget)
        self.line_only_copy.setGeometry(QtCore.QRect(100, 240, 241, 21))
        self.line_only_copy.setObjectName("line_only_copy")
                                
        # Input Not Copy List
        self.line_only_not_copy = QtWidgets.QLineEdit(self.centralwidget)
        self.line_only_not_copy.setGeometry(QtCore.QRect(100, 291, 241, 21))
        self.line_only_not_copy.setObjectName("line_only_not_copy")
        
        # Label
        self.label_only_copy = QtWidgets.QLabel(self.centralwidget)
        self.label_only_copy.setGeometry(QtCore.QRect(360, 240, 241, 16))
        self.label_only_copy.setObjectName("label_only_copy")
        
        # Label
        self.label_not_copy = QtWidgets.QLabel(self.centralwidget)
        self.label_not_copy.setGeometry(QtCore.QRect(360, 290, 241, 16))
        self.label_not_copy.setObjectName("label_not_copy")
        
        
        
        # Btn Gen Log
        # self.btn_log = QtWidgets.QPushButton(self.centralwidget)
        # self.btn_log.setGeometry(QtCore.QRect(80, 590, 113, 32))
        # self.btn_log.setObjectName("btn_log")
        # self.btn_log.clicked.connect(self.onclick_beginCopy)

        
        # Btn Gen Repeat Log
        # self.btn_repeat_log = QtWidgets.QPushButton(self.centralwidget)
        # self.btn_repeat_log.setGeometry(QtCore.QRect(220, 590, 141, 32))
        # self.btn_repeat_log.setObjectName("btn_repeat_log")
        
        # Btn Clear Log
        self.btn_clear_log = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clear_log.setGeometry(QtCore.QRect(440, 590, 141, 32))
        self.btn_clear_log.setObjectName("btn_clear_log")     
        self.btn_clear_log.clicked.connect(self.ClearLog)            
        
        # CheckBox Copy Only
        self.check_only_copy = QtWidgets.QCheckBox(self.centralwidget)
        self.check_only_copy.setGeometry(QtCore.QRect(77, 210, 141, 20))
        self.check_only_copy.setObjectName("check_only_copy")
        self.check_only_copy.stateChanged.connect(lambda: self.btnstate(self.check_only_copy))
        
        # CheckBox Copy Only NOT
        self.check_only_not_copy = QtWidgets.QCheckBox(self.centralwidget)
        self.check_only_not_copy.setGeometry(QtCore.QRect(77, 260, 141, 20))
        self.check_only_not_copy.setObjectName("check_only_not_copy")
        self.check_only_not_copy.stateChanged.connect(lambda: self.btnstate(self.check_only_not_copy))
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # short cut close app
        closeAction = QtWidgets.QAction('Close', MainWindow)
        closeAction.setShortcut('Ctrl+Q')
        closeAction.setStatusTip('Close Plugin')
        closeAction.triggered.connect(MainWindow.close)
        
        # Marker: Show System Log  
        self.th = MyThread()
        self.th.signalForText.connect(self.onUpdateText)        
        sys.stdout = self.th        
                           

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EDL Copy App"))
        self.rad_checksum_y.setText(_translate("MainWindow", "校验"))
        self.rad_checksum_n.setText(_translate("MainWindow", "不校验"))
        self.rad_kpDir_y.setText(_translate("MainWindow", "保留目录结构"))
        self.rad_kpDir_n.setText(_translate("MainWindow", "只拷贝档案"))
        self.path_edl.setText(_translate("MainWindow", "选择EDL"))
        #self.label_title.setText(_translate("MainWindow", "EDL拷贝"))
        self.path_dest.setText(_translate("MainWindow", "选择拷贝目的地"))
        self.path_from.setText(_translate("MainWindow", "选择拷贝来源"))
        # self.label_dontkeep.setText(_translate("MainWindow", "不保留前"))
        # self.label_level.setText(_translate("MainWindow", "层结构"))
        # self.label_overide.setText(_translate("MainWindow", "若相同目标路径下有相同的档名存在，会覆盖"))
        self.label_copy_0.setText(_translate("MainWindow", ""))
        # self.label_copy_tol.setText(_translate("MainWindow", "70"))
        # self.label_copy_now_desc.setText(_translate("MainWindow", "已经拷贝"))
        self.label_huhu.setText(_translate("MainWindow", "2023 HuHu Tech All Rights Reserved. v0.6.1 "))
        self.btn_start.setText(_translate("MainWindow", "开始拷贝"))                
        self.label_only_copy.setText(_translate("MainWindow", "逗号隔开 Ex: mov,r3d,exr,tif,ari"))
        self.label_not_copy.setText(_translate("MainWindow", "逗号隔开 Ex: mov"))
        self.label_copy_now.setText(_translate("MainWindow", ""))
        #self.btn_log.setText(_translate("MainWindow", "Copy Script"))
        # self.btn_repeat_log.setText(_translate("MainWindow", "Status Report"))
        self.btn_clear_log.setText(_translate("MainWindow", "清除记录"))
        self.check_only_copy.setText(_translate("MainWindow", "只拷贝副档名为"))
        self.check_only_not_copy.setText(_translate("MainWindow", "不拷贝副档名为"))

    def onclick_beginCopy(self):
        
        self.thread = Thread()
        self.thread.valueChange.connect(self.callbackProgress)#label_copy_now.setText
        self.thread.start()
        
    def callbackProgress(self,theCmd,hasExecCount,tolCount):
        self.label_copy_0.setText("0")
        if tolCount > 0:
            self.progressBar.setValue(int((hasExecCount)*(100/tolCount)))
        
        if hasExecCount != tolCount:
            self.label_copy_now.setText("目前执行: " +str(hasExecCount)+ " 个任务")
        else:
            self.label_copy_now.setText("执行完毕")
        
        self.label_copy_tol.setText(str(tolCount))
        
# Marker: Choose EDL File   
    def CallFileChoose_edl(self):
                
        clip_path = self.FileDialog(last_directory='LastClipPath',fmt=['txt','edl'], isFolder=False)        
        self.label_path_edl.setText(clip_path) ####Set EDL PATH 
        self.thePath['clip_path'] = clip_path        
        return ''
       
    def CallFileChoose_from(self):
        
        from_path = self.FileDialog(last_directory='LastFromPath',isFolder=True)        
        self.label_path_from.setText(from_path)
        self.thePath['from_path'] = from_path        
        return ''       
       
    def CallFileChoose_to(self):
        
        to_path = self.FileDialog(last_directory='LastToPath',isFolder=True)        
        self.label_path_dest.setText(to_path)
        self.thePath['to_path'] = to_path
        return ''      
                
    def FileDialog(self,last_directory='', forOpen=True, fmt=[''], isFolder=False):
                        
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        options |= QFileDialog.DontUseCustomDirectoryIcons
        # options |= QFileDialog.DontResolveSymlinks
                            
        dialog = QFileDialog()
        dialog.setOptions(options)
        dialog.setOptions(QFileDialog.DontUseCustomDirectoryIcons)
      
            
#         dialog.setFilter(dialog.filter() | QDir.Hidden)
        dialog.setFilter(dialog.filter())
    
        # FILES OR FOLDERS
        if isFolder:
            dialog.setFileMode(QFileDialog.DirectoryOnly)
        else:
            dialog.setFileMode(QFileDialog.AnyFile)
        # OPENING OR SAVING
        dialog.setAcceptMode(QFileDialog.AcceptOpen) if forOpen else dialog.setAcceptMode(QFileDialog.AcceptSave)
    
        # SET FORMAT, IF SPECIFIED        
        if isFolder is False:
            # dialog.setDefaultSuffix(fm in fmt)
            # ({"Image files (*.png *.xpm *.jpg)",
            #   "Text files (*.txt)",
            #   "Any files (*)"
            #               });
            fmstr = ''
            for fm in fmt:
                fmstr = fmstr + '*.'+fm+' '
            dialog.setNameFilters([("Text Files ("+fmstr+")")])
                

    
        # SET THE STARTING DIRECTORY
        settings = QSettings("Setting.ini", QSettings.IniFormat)
        # settings.setValue("LastFilePath",ui.lineEditIPAddr.text())
        directory = settings.value(last_directory)
        
        if directory != '':
            dialog.setDirectory(str(directory))
        else:
            dialog.setDirectory(str(self.LAST_DIR))
    
    
        if dialog.exec_() == QDialog.Accepted:
            path = dialog.selectedFiles()[0]  # returns a list                                   
            
            # 保存当前目录的路径到配置文件中，另外如果不存在'tmp/.temp'文件该函数会自动创建          
            # print(os.path.dirname(path))          
            settings.setValue(str(last_directory), os.path.dirname(path))            
            # 将路径设为''程序会使用上一次的路径
            # self.last_path = ''

            return path
        else:
            return ''
        
    # Radio Btn Action
    def onClicked_chksum(self):
        radioButton = self.sender()
        if radioButton.isChecked():
            if(radioButton.function=='chk_y'):
                self.thePath['rad_chksum'] = "Y"                  
            elif radioButton.function=='chk_n':
                self.thePath['rad_chksum'] = "N"                                          
            print("Choosed Function: %s" % (radioButton.function))
                   
    # Radio Btn Action
    def onClicked_kpdir(self):
        radioButton = self.sender()
        if radioButton.isChecked():           
            if radioButton.function=='kpdir_y':
                self.thePath['rad_kpdir'] = "Y"   
            elif radioButton.function=='kpdir_n':
                self.thePath['rad_kpdir'] = "N"                                            
            print("Choosed Function: %s" % (radioButton.function))                   
            
    # CheckBox    
    
    def btnstate(self, btn):
        if self.check_only_copy.isChecked():
            self.thePath['chkbox_only'] = 'Y'
            
        else:
            self.thePath['chkbox_only']  = 'N'
            
        if self.check_only_not_copy.isChecked():
            self.thePath['chkbox_only_not']  = 'Y'
        else:
            self.thePath['chkbox_only_not'] = 'N'   
                                           
                    
    # Output Log    
    def onUpdateText(self,text):
        cursor = self.text_log.textCursor()
        cursor.movePosition(QTextCursor.End)
        cursor.insertText(text)
        self.text_log.setTextCursor(cursor)
        self.text_log.ensureCursorVisible()
                       
    # Clear Log
    def ClearLog(self):
        self.text_log.clear()        
        
        
    # Call Core Class
    def CallCopyClass(self):
        self.text_log.clear()
        
        self.thePath['input_only'] = self.line_only_copy.text()     
        self.thePath['input_only_not'] = self.line_only_not_copy.text()  
        
        isValid = True        
       
        if os.path.isfile(self.thePath['clip_path']):
            print("Clip Path OS:" + self.thePath['clip_path'])
        
        if 'clip_path' in self.thePath and os.path.isfile(self.thePath['clip_path']):           
            print("Clip Path:" + self.thePath['clip_path'])
           
        else:
            print("Please Choose EDL/TXT File")
            isValid = False
                    
        if 'from_path' in self.thePath and os.path.isdir(self.thePath['from_path']):           
            print("From Path:" + self.thePath['from_path'])
        else:
            print("Please Choose From Path")    
            isValid = False        
        
        if 'to_path' in self.thePath and os.path.isdir(self.thePath['to_path']):           
            print("To Path:" + self.thePath['to_path'])
        else:
            print("Please Choose Destination Path")
            isValid = False
            
        if isValid:       
            print("Start Proceess...")
            self.progressBar.setVisible(True)
            time.sleep(1)       
                                                       
            self.thread = Thread(**self.thePath)                
            self.thread.valueChange.connect(self.callbackProgress)            
            self.thread.start()
                        
        return True         
        
            
class MyThread(QThread):
    signalForText = pyqtSignal(str)
        
    def __init__(self,data=None, parent=None):
        super(MyThread, self).__init__(parent)
        self.data = data

    def write(self, text):
        self.signalForText.emit(str(text))  # Emit Signal
        
    
class Thread(QThread):
    # Thread signal
    valueChange = pyqtSignal(str,int,int)
    # Constructor
                                 
    def __init__(self,**thePath):
        super(Thread, self).__init__()
        self.isPause = False
        self.isCancel=False
        self.cond = QWaitCondition()
        self.mutex = QMutex()    
                
        self.thePath = thePath        
    # Pause
    def pause(self):
        print("线程暂停")
        self.isPause = True
        
    # Resume
    def resume(self):
        print("线程恢复")
        self.isPause = False
        self.cond.wakeAll()
    # Cancel
    def cancel(self):
        print("线程取消")
        self.isCancel=True
    # Run(Entrance)
    def run(self):
        has_copied = 0
        t = CopyByEDL(**self.thePath)
        copy_script = t.b_genCopyScript()
        for cmd in copy_script:
            
            try:
                # Thread Lock On
                self.mutex.lock()
                os.system(cmd)
                has_copied += 1
                self.valueChange.emit(cmd,has_copied,len(copy_script))
                print('执行:'+cmd)
                self.msleep(10)
                self.mutex.unlock()
            except:
                print("-----------Exec Exception Occurs in :" + cmd)
        
        
        print(str(has_copied) + ' 个指令执行完成')
        print("----------------")
        print("Command + Q 退出")
        copy_script.clear()
        has_copied = 0
      
